package org.pack.java.recomendationSystem;import javax.imageio.stream.ImageInputStream;import java.util.HashMap;import java.util.Map;public class RecommendationSystem {    private Map<String, Map<String, Double>> userItemRating;    public RecommendationSystem() {        this.userItemRating = new HashMap<>();    }    public void addRating(String user, String item, Double rating) {        userItemRating.putIfAbsent(user, new HashMap<>());        userItemRating.get(user).put(item, rating);    }    public Map<String, Double> getRatings(String user) {        return userItemRating.getOrDefault(user, new HashMap<>());    }    private double calculateSimilarity(String user1, String user2) {        Map<String, Double> ratings1 = getRatings(user1);        Map<String, Double> ratings2 = getRatings(user2);        double dotProduct = 0.0;        double norm1 = 0.0;        double norm2 = 0.0;        for (String item : ratings1.keySet()) {            if (ratings2.containsKey(item)) {                dotProduct += ratings1.get(item) * ratings2.get(item);            }            norm1 += Math.pow(ratings1.get(item), 2);        }        for (double rating : ratings2.values()) {            norm2 += Math.pow(rating, 2);        }        norm1 = Math.sqrt(norm1);        norm2 = Math.sqrt(norm2);        if (norm1 == 0.0 || norm2 == 0.0) {            return 0.0;        }        return dotProduct / (norm1 * norm2);    }    public Map<String, Double> getRecommendations(String user) {        Map<String, Double> recommendations = new HashMap<>();        Map<String, Double> userRatings = getRatings(user);        for (String otherUser : userItemRating.keySet()) {            if (!otherUser.equals(user)) {                double similarity = calculateSimilarity(user, otherUser);                for (Map.Entry<String, Double> entry : getRatings(otherUser).entrySet()) {                if (!userRatings.containsKey(entry.getKey())) {                    recommendations.put(entry.getKey(),                            recommendations.getOrDefault(entry.getKey(), 0.0) + similarity * entry.getValue());                }            }        }    }            return recommendations;    }        public static void main(String[] args) {            RecommendationSystem recommendationSystem = new RecommendationSystem();            recommendationSystem.addRating("Alice", "Item1", 5.0);            recommendationSystem.addRating("Alice", "Item2", 3.0);            recommendationSystem.addRating("Alice", "Item3", 4.0);            recommendationSystem.addRating("Alice", "Item4", 4.0);            recommendationSystem.addRating("Alice", "Item5", 1.0);            recommendationSystem.addRating("Bob", "Item1", 4.0);            recommendationSystem.addRating("Bob", "Item2", 4.0);            recommendationSystem.addRating("Bob", "Item3", 5.0);            recommendationSystem.addRating("Bob", "Item4", 3.0);            recommendationSystem.addRating("Bob", "Item5", 2.0);            recommendationSystem.addRating("Charlie", "Item1", 2.0);            recommendationSystem.addRating("Charlie", "Item2", 5.0);            recommendationSystem.addRating("Charlie", "Item3", 4.0);            recommendationSystem.addRating("Charlie", "Item4", 4.0);            recommendationSystem.addRating("Charlie", "Item5", 5.0);            //System.out.println(recommendationSystem.getRecommendations("Alice"));        Map<String, Double> recommendations = recommendationSystem.getRecommendations("Alice");        System.out.println("Recommendations for Alice: ");        for (Map.Entry<String, Double> entry : recommendations.entrySet()) {            System.out.println(entry.getKey() + ": " + entry.getValue());        }    }}