package org.pack.java.schemaGenerator;import java.lang.reflect.Field;public class SchemaGenerator {	public static String generateSchema(Class<?> clazz) {		StringBuilder schema = new StringBuilder();		schema.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");		schema.append("<xs:schema xmlns:xs=\"https://www.w3.org/2001/XMLSchema\">\n");		schema.append("		<xs:element name=\"").append(clazz.getSimpleName()).append("\">\n");		schema.append("			<xs:complexType>\n");		schema.append("				<xs:sequence>\n");		for(Field field: clazz.getDeclaredFields()) {			schema.append("					<xs:element name=\"").append(field.getName()).append("\" type=\" ")					.append(getXSDType(field.getType())).append("\"/>\n");		}		schema.append("				</xs:sequence>\n");		schema.append("			</xs:complexType>\n");		schema.append("		</xs:element>\n");		schema.append("</xs:schema>\n");		return schema.toString();	}	private static String getXSDType(Class<?> type) {		if(type.equals(String.class)) {			return "xs:string";		} else if(type.equals(int.class) || type.equals(Integer.class)) {			return "xs:int";		} else if(type.equals(long.class) || type.equals(Long.class)) {			return "xs:long";		} else if(type.equals(double.class) || type.equals(Double.class)) {			return "xs:double";		} else if(type.equals(float.class) || type.equals(Float.class)) {			return "xs:float";		} else if(type.equals(boolean.class) || type.equals(Boolean.class)) {			return "xs:boolean";		} else {			return "xs:string";		}	}	public static void main(String[] args) {		String schema = generateSchema(Content.class);		System.out.println(schema);	}}