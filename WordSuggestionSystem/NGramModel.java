import java.util.*;public class NGramModel {    private Map<String, Map<String, Integer>> transitions;    private Map<String, Integer> wordFrequencies;    private int totalWords;    public NGramModel() {        this.transitions = new HashMap<>();        this.wordFrequencies = new HashMap<>();        this.totalWords = 0;    }    public void train(String text) {        String[] words = text.toLowerCase().split("\\s+");                // Update word frequencies        for (String word : words) {            wordFrequencies.put(word, wordFrequencies.getOrDefault(word, 0) + 1);            totalWords++;        }        // Build n-gram transitions        for (int i = 0; i < words.length - 1; i++) {            String currentWord = words[i];            String nextWord = words[i + 1];            transitions.putIfAbsent(currentWord, new HashMap<>());            Map<String, Integer> nextWords = transitions.get(currentWord);            nextWords.put(nextWord, nextWords.getOrDefault(nextWord, 0) + 1);        }    }    public double getWordProbability(String word) {        return (double) wordFrequencies.getOrDefault(word, 0) / totalWords;    }    public Map<String, Integer> getNextWordCounts(String word) {        return transitions.getOrDefault(word.toLowerCase(), new HashMap<>());    }}